name: Build - publish - deploy

on:
  push:
    branches:
      - main
      - PM-1524-deploy-workflow
  workflow_dispatch:
    inputs:
      docker_tag_prefix:
        description: "Enter the Docker Tag Prefix (e.g adhoc-test)"
        required: true
        type: string

env:
  ECR_REPOSITORY_URL: 673156464838.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY_NAME: gpt-survey-summarizer
  APPLICATION_NAME: gpt-survey-summarizer 
  DEPLOYMENT_TAG: ${{ github.event.inputs.deployment_tag }}
  PLATFORM: sandbox
  NAMESPACE: governance

jobs:
  build-publish-deploy:
    name: Build Publish and Deploy Docker Image
    runs-on: minafoundation-default-runners
    steps:

      - name: ‚öôÔ∏è  Set environment variables
        run: |
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
          echo "DEPLOYMENT_ROLE_NAME=$DEPLOYMENT_ROLE_NAME" >> $GITHUB_ENV
          echo "AWS_ROLE_DURATION_SECONDS=$AWS_ROLE_DURATION_SECONDS" >> $GITHUB_ENV

      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ü¶Ä Get application version from package.json
        id: application-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: üè∑Ô∏è Generate Tag
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TAG=${{ env.DOCKER_TAG_PREFIX }}-${{ steps.application-version.outputs.current-version }}-$SHORT_SHA" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "push" ] && [ -n "${{ github.event.ref }}" ]; then
            echo "TAG=${{ steps.application-version.outputs.current-version }}-$SHORT_SHA" >> $GITHUB_ENV
          else
            echo "Invalid event. Exiting..."
            exit 1
          fi

      - name: üîë ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üîç Check if Tag already exists
        id: checktag
        uses: tyriis/docker-image-tag-exists@main
        with:
          registry: ${{ env.ECR_REPOSITORY_URL}}
          repository: ${{ env.ECR_REPOSITORY_NAME }}
          tag: ${{ env.TAG }}

      - name: üõ†Ô∏è Build and Push Docker
        uses: mr-smithers-excellent/docker-build-push@v6
        id: build
        if: steps.checktag.outputs.tag == 'not found'
        with:
          image: ${{ env.ECR_REPOSITORY_NAME }}
          registry: ${{ env.ECR_REPOSITORY_URL }}
          tags: ${{ env.TAG }}

      - name: Check output format
        run: |
          echo ${{ steps.build.outputs.tags }}

#      - name: üîë Assume role
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-region: ${{ env.AWS_REGION }}
#          role-to-assume: ${{ env.DEPLOYMENT_ROLE_NAME }}
#          role-session-name: ${{ env.DEPLOYMENT_ROLE_NAME }}
#          role-duration-seconds: ${{ env.AWS_ROLE_DURATION_SECONDS }}
#
#      - name: üÜô Update kubeconfig
#        run: |
#          aws eks update-kubeconfig --name $PLATFORM --region $AWS_REGION 1>/dev/null
#
#      - name: üíø Set deployment image
#        id: deployment
#        if: steps.checktag.outputs.tag == 'found'
#        run: |
#          kubectl set image deployment "*=$ECR_REPOSITORY_URL/$ECR_REPOSITORY_NAME:$TAG" -l app.kubernetes.io/name=$APPLICATION_NAME -n $NAMESPACE
#          echo "success=$?" >> $GITHUB_OUTPUT
#
#      - name: ‚è±Ô∏è  Wait for pods to be ready
#        if: steps.deployment.outputs.success == '0'
#        run: |
#          kubectl wait --for='jsonpath={.status.conditions[?(@.type=="Ready")].status}=True' pods -l app.kubernetes.io/name=$APPLICATION_NAME -n $NAMESPACE
